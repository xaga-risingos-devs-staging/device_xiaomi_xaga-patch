From 7b7b95b7deff3854f27dd2aa92373743a0d4905f Mon Sep 17 00:00:00 2001
From: minaripenguin <minaripenguin@users.noreply.github.com>
Date: Mon, 20 Jan 2025 21:26:38 +0800
Subject: [PATCH 1/3] wm: Use veiled resize effect for freeform windows

Signed-off-by: minaripenguin <minaripenguin@users.noreply.github.com>
---
 .../wm/shell/dagger/WMShellModule.java        |  3 +-
 .../CaptionWindowDecorViewModel.java          | 27 +++++--
 .../windowdecor/CaptionWindowDecoration.java  | 80 +++++++++++++++++++
 .../VeiledResizeTaskPositioner.java           | 38 +++++++--
 4 files changed, 135 insertions(+), 13 deletions(-)

diff --git a/libs/WindowManager/Shell/src/com/android/wm/shell/dagger/WMShellModule.java b/libs/WindowManager/Shell/src/com/android/wm/shell/dagger/WMShellModule.java
index d9d8479c5..571f94e0d 100644
--- a/libs/WindowManager/Shell/src/com/android/wm/shell/dagger/WMShellModule.java
+++ b/libs/WindowManager/Shell/src/com/android/wm/shell/dagger/WMShellModule.java
@@ -322,7 +322,8 @@ public abstract class WMShellModule {
                 syncQueue,
                 transitions,
                 focusTransitionObserver,
-                windowDecorViewHostSupplier);
+                windowDecorViewHostSupplier,
+                interactionJankMonitor);
     }
 
     @WMSingleton
diff --git a/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/CaptionWindowDecorViewModel.java b/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/CaptionWindowDecorViewModel.java
index 0b919668f..0385004f9 100644
--- a/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/CaptionWindowDecorViewModel.java
+++ b/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/CaptionWindowDecorViewModel.java
@@ -54,6 +54,8 @@ import android.window.WindowContainerTransaction;
 
 import androidx.annotation.Nullable;
 
+import com.android.internal.jank.InteractionJankMonitor;
+
 import com.android.wm.shell.R;
 import com.android.wm.shell.RootTaskDisplayAreaOrganizer;
 import com.android.wm.shell.ShellTaskOrganizer;
@@ -93,6 +95,7 @@ public class CaptionWindowDecorViewModel implements WindowDecorViewModel, FocusT
     private final Region mExclusionRegion = Region.obtain();
     private final InputManager mInputManager;
     private final WindowDecorViewHostSupplier<WindowDecorViewHost> mWindowDecorViewHostSupplier;
+    private final InteractionJankMonitor mInteractionJankMonitor;
     private TaskOperations mTaskOperations;
     private FocusTransitionObserver mFocusTransitionObserver;
 
@@ -134,7 +137,8 @@ public class CaptionWindowDecorViewModel implements WindowDecorViewModel, FocusT
             SyncTransactionQueue syncQueue,
             Transitions transitions,
             FocusTransitionObserver focusTransitionObserver,
-            WindowDecorViewHostSupplier<WindowDecorViewHost> windowDecorViewHostSupplier) {
+            WindowDecorViewHostSupplier<WindowDecorViewHost> windowDecorViewHostSupplier,
+            InteractionJankMonitor interactionJankMonitor) {
         mContext = context;
         mMainExecutor = shellExecutor;
         mMainHandler = mainHandler;
@@ -148,6 +152,7 @@ public class CaptionWindowDecorViewModel implements WindowDecorViewModel, FocusT
         mTransitions = transitions;
         mFocusTransitionObserver = focusTransitionObserver;
         mWindowDecorViewHostSupplier = windowDecorViewHostSupplier;
+        mInteractionJankMonitor = interactionJankMonitor;
         if (!Transitions.ENABLE_SHELL_TRANSITIONS) {
             mTaskOperations = new TaskOperations(null, mContext, mSyncQueue);
         }
@@ -341,19 +346,31 @@ public class CaptionWindowDecorViewModel implements WindowDecorViewModel, FocusT
                         mWindowDecorViewHostSupplier);
         mWindowDecorByTaskId.put(taskInfo.taskId, windowDecoration);
 
-        final FluidResizeTaskPositioner taskPositioner =
-                new FluidResizeTaskPositioner(mTaskOrganizer, mTransitions, windowDecoration,
-                        mDisplayController);
+        final DragPositioningCallback taskPositioner = createDragPositioningCallback(
+                windowDecoration);
         final CaptionTouchEventListener touchEventListener =
                 new CaptionTouchEventListener(taskInfo, taskPositioner);
         windowDecoration.setCaptionListeners(touchEventListener, touchEventListener);
         windowDecoration.setDragPositioningCallback(taskPositioner);
-        windowDecoration.setTaskDragResizer(taskPositioner);
+        windowDecoration.setTaskDragResizer((VeiledResizeTaskPositioner) taskPositioner);
         windowDecoration.relayout(taskInfo, startT, finishT,
                 false /* applyStartTransactionOnDraw */, false /* setTaskCropAndPosition */,
                 mFocusTransitionObserver.hasGlobalFocus(taskInfo), mExclusionRegion);
     }
 
+    private DragPositioningCallback createDragPositioningCallback(
+            CaptionWindowDecoration windowDecoration) {
+            windowDecoration.createResizeVeil();
+        return new VeiledResizeTaskPositioner(
+                mTaskOrganizer,
+                windowDecoration,
+                mDisplayController,
+                dragStartListener -> {},
+                mTransitions,
+                mInteractionJankMonitor,
+                mMainHandler);
+    }
+
     private class CaptionTouchEventListener implements
             View.OnClickListener, View.OnTouchListener, DragDetector.MotionEventHandler {
 
diff --git a/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/CaptionWindowDecoration.java b/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/CaptionWindowDecoration.java
index 110503df9..510ab92b2 100644
--- a/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/CaptionWindowDecoration.java
+++ b/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/CaptionWindowDecoration.java
@@ -23,6 +23,8 @@ import static com.android.wm.shell.windowdecor.DragResizeWindowGeometry.getLarge
 import static com.android.wm.shell.windowdecor.DragResizeWindowGeometry.getResizeEdgeHandleSize;
 import static com.android.wm.shell.windowdecor.DragResizeWindowGeometry.getResizeHandleEdgeInset;
 
+import static com.android.launcher3.icons.BaseIconFactory.MODE_DEFAULT;
+
 import android.annotation.NonNull;
 import android.annotation.SuppressLint;
 import android.app.ActivityManager;
@@ -30,16 +32,23 @@ import android.app.ActivityManager.RunningTaskInfo;
 import android.app.WindowConfiguration;
 import android.app.WindowConfiguration.WindowingMode;
 import android.content.Context;
+import android.content.pm.ApplicationInfo;
+import android.content.pm.PackageManager;
 import android.content.res.ColorStateList;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
+import android.graphics.Bitmap;
+import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Insets;
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.graphics.Region;
+import android.graphics.drawable.BitmapDrawable;
+import android.graphics.drawable.Drawable;
 import android.graphics.drawable.GradientDrawable;
 import android.os.Handler;
+import android.util.Log;
 import android.util.Size;
 import android.view.Choreographer;
 import android.view.Display;
@@ -53,6 +62,10 @@ import android.view.WindowManager;
 import android.window.WindowContainerTransaction;
 
 import com.android.internal.policy.ScreenDecorationsUtils;
+
+import com.android.launcher3.icons.BaseIconFactory;
+import com.android.launcher3.icons.IconProvider;
+
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.wm.shell.R;
 import com.android.wm.shell.ShellTaskOrganizer;
@@ -71,6 +84,8 @@ import com.android.wm.shell.windowdecor.extension.TaskInfoKt;
  * maximize button and close button.
  */
 public class CaptionWindowDecoration extends WindowDecoration<WindowDecorLinearLayout> {
+    private static final String TAG = "CaptionWindowDecoration";
+
     private final Handler mHandler;
     private final @ShellBackgroundThread ShellExecutor mBgExecutor;
     private final Choreographer mChoreographer;
@@ -85,6 +100,9 @@ public class CaptionWindowDecoration extends WindowDecoration<WindowDecorLinearL
     private final RelayoutResult<WindowDecorLinearLayout> mResult =
             new RelayoutResult<>();
 
+    private ResizeVeil mResizeVeil;
+    private Bitmap mResizeVeilBitmap;
+
     CaptionWindowDecoration(
             Context context,
             @NonNull Context userContext,
@@ -103,6 +121,8 @@ public class CaptionWindowDecoration extends WindowDecoration<WindowDecorLinearL
         mBgExecutor = bgExecutor;
         mChoreographer = choreographer;
         mSyncQueue = syncQueue;
+        
+        loadAppInfo();
     }
 
     void setCaptionListeners(
@@ -408,6 +428,65 @@ public class CaptionWindowDecoration extends WindowDecoration<WindowDecorLinearL
         mDragResizeListener = null;
     }
 
+    private void loadAppInfo() {
+        String packageName = mTaskInfo.realActivity.getPackageName();
+        PackageManager pm = mContext.getApplicationContext().getPackageManager();
+        try {
+            IconProvider provider = new IconProvider(mContext);
+            Drawable appIcon = provider.getIcon(pm.getActivityInfo(mTaskInfo.baseActivity,
+                    PackageManager.ComponentInfoFlags.of(0)));
+            final BaseIconFactory resizeVeilIconFactory = createIconFactory(mContext,
+                    R.dimen.desktop_mode_resize_veil_icon_size);
+            mResizeVeilBitmap = resizeVeilIconFactory
+                    .createScaledBitmap(appIcon, MODE_DEFAULT);
+        } catch (PackageManager.NameNotFoundException e) {
+            Log.w(TAG, "Package not found: " + packageName, e);
+        }
+    }
+
+    private BaseIconFactory createIconFactory(Context context, int dimensions) {
+        final Resources resources = context.getResources();
+        final int densityDpi = resources.getDisplayMetrics().densityDpi;
+        final int iconSize = resources.getDimensionPixelSize(dimensions);
+        return new BaseIconFactory(context, densityDpi, iconSize);
+    }
+
+    /**
+     * Create the resize veil for this task. Note the veil's visibility is View.GONE by default
+     * until a resize event calls showResizeVeil below.
+     */
+    void createResizeVeil() {
+        mResizeVeil = new ResizeVeil(mContext, mDisplayController, mResizeVeilBitmap,
+                mTaskSurface, mSurfaceControlTransactionSupplier, mTaskInfo);
+    }
+
+    /**
+     * Fade in the resize veil
+     */
+    void showResizeVeil(Rect taskBounds) {
+        mResizeVeil.showVeil(mTaskSurface, taskBounds, mTaskInfo);
+    }
+
+    /**
+     * Set new bounds for the resize veil
+     */
+    void updateResizeVeil(Rect newBounds) {
+        mResizeVeil.updateResizeVeil(newBounds);
+    }
+
+    /**
+     * Fade the resize veil out.
+     */
+    void hideResizeVeil() {
+        mResizeVeil.hideVeil();
+    }
+
+    private void disposeResizeVeil() {
+        if (mResizeVeil == null) return;
+        mResizeVeil.dispose();
+        mResizeVeil = null;
+    }
+
     private static int getTopPadding(RelayoutParams params, Rect taskBounds,
             InsetsState insetsState) {
         if (!params.mRunningTaskInfo.isFreeform()) {
@@ -434,6 +513,7 @@ public class CaptionWindowDecoration extends WindowDecoration<WindowDecorLinearL
     @Override
     public void close() {
         closeDragResizeListener();
+        disposeResizeVeil();
         super.close();
     }
 
diff --git a/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/VeiledResizeTaskPositioner.java b/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/VeiledResizeTaskPositioner.java
index 1f03d7568..cb099ca1f 100644
--- a/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/VeiledResizeTaskPositioner.java
+++ b/libs/WindowManager/Shell/src/com/android/wm/shell/windowdecor/VeiledResizeTaskPositioner.java
@@ -59,7 +59,7 @@ public class VeiledResizeTaskPositioner implements TaskPositioner, Transitions.T
     // timing out in the middle of a resize or drag action.
     private static final long LONG_CUJ_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(10L);
 
-    private DesktopModeWindowDecoration mDesktopWindowDecoration;
+    private WindowDecoration<?> mDesktopWindowDecoration;
     private ShellTaskOrganizer mTaskOrganizer;
     private DisplayController mDisplayController;
     private ArrayList<DragPositioningCallbackUtility.DragEventListener>
@@ -78,7 +78,7 @@ public class VeiledResizeTaskPositioner implements TaskPositioner, Transitions.T
     private final Handler mHandler;
 
     public VeiledResizeTaskPositioner(ShellTaskOrganizer taskOrganizer,
-            DesktopModeWindowDecoration windowDecoration,
+            WindowDecoration<?> windowDecoration,
             DisplayController displayController,
             DragPositioningCallbackUtility.DragEventListener dragEventListener,
             Transitions transitions, InteractionJankMonitor interactionJankMonitor,
@@ -88,7 +88,7 @@ public class VeiledResizeTaskPositioner implements TaskPositioner, Transitions.T
     }
 
     public VeiledResizeTaskPositioner(ShellTaskOrganizer taskOrganizer,
-            DesktopModeWindowDecoration windowDecoration,
+            WindowDecoration<?> windowDecoration,
             DisplayController displayController,
             DragPositioningCallbackUtility.DragEventListener dragEventListener,
             Supplier<SurfaceControl.Transaction> supplier, Transitions transitions,
@@ -151,10 +151,22 @@ public class VeiledResizeTaskPositioner implements TaskPositioner, Transitions.T
                         mDragEventListeners) {
                     dragEventListener.onDragMove(mDesktopWindowDecoration.mTaskInfo.taskId);
                 }
-                mDesktopWindowDecoration.showResizeVeil(mRepositionTaskBounds);
+                if(mDesktopWindowDecoration instanceof DesktopModeWindowDecoration) {
+                    ((DesktopModeWindowDecoration) mDesktopWindowDecoration)
+                        .showResizeVeil(mRepositionTaskBounds);
+                } else {
+                    ((CaptionWindowDecoration) mDesktopWindowDecoration)
+                        .showResizeVeil(mRepositionTaskBounds);
+                }
                 mIsResizingOrAnimatingResize = true;
             } else {
-                mDesktopWindowDecoration.updateResizeVeil(mRepositionTaskBounds);
+                if(mDesktopWindowDecoration instanceof DesktopModeWindowDecoration) {
+                    ((DesktopModeWindowDecoration) mDesktopWindowDecoration)
+                        .updateResizeVeil(mRepositionTaskBounds);
+                } else {
+                    ((CaptionWindowDecoration) mDesktopWindowDecoration)
+                        .updateResizeVeil(mRepositionTaskBounds);
+                }
             }
         } else if (mCtrlType == CTRL_TYPE_UNDEFINED) {
             // Begin window drag CUJ instrumentation only when drag position moves.
@@ -178,7 +190,13 @@ public class VeiledResizeTaskPositioner implements TaskPositioner, Transitions.T
                 DragPositioningCallbackUtility.changeBounds(
                         mCtrlType, mRepositionTaskBounds, mTaskBoundsAtDragStart, mStableBounds,
                         delta, mDisplayController, mDesktopWindowDecoration);
-                mDesktopWindowDecoration.updateResizeVeil(mRepositionTaskBounds);
+                if(mDesktopWindowDecoration instanceof DesktopModeWindowDecoration) {
+                    ((DesktopModeWindowDecoration) mDesktopWindowDecoration)
+                        .updateResizeVeil(mRepositionTaskBounds);
+                } else {
+                    ((CaptionWindowDecoration) mDesktopWindowDecoration)
+                        .updateResizeVeil(mRepositionTaskBounds);
+                }
                 final WindowContainerTransaction wct = new WindowContainerTransaction();
                 wct.setBounds(mDesktopWindowDecoration.mTaskInfo.token, mRepositionTaskBounds);
                 mTransitions.startTransition(TRANSIT_CHANGE, wct, this);
@@ -207,7 +225,13 @@ public class VeiledResizeTaskPositioner implements TaskPositioner, Transitions.T
 
     private void resetVeilIfVisible() {
         if (mIsResizingOrAnimatingResize) {
-            mDesktopWindowDecoration.hideResizeVeil();
+            if(mDesktopWindowDecoration instanceof DesktopModeWindowDecoration) {
+                ((DesktopModeWindowDecoration) mDesktopWindowDecoration)
+                    .hideResizeVeil();
+            } else {
+                ((CaptionWindowDecoration) mDesktopWindowDecoration)
+                    .hideResizeVeil();
+            }
             mIsResizingOrAnimatingResize = false;
         }
     }
-- 
2.49.0

